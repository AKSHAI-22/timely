// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BatchMetadataUpdate extends ethereum.Event {
  get params(): BatchMetadataUpdate__Params {
    return new BatchMetadataUpdate__Params(this);
  }
}

export class BatchMetadataUpdate__Params {
  _event: BatchMetadataUpdate;

  constructor(event: BatchMetadataUpdate) {
    this._event = event;
  }

  get _fromTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _toTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ExpertProfileUpdated extends ethereum.Event {
  get params(): ExpertProfileUpdated__Params {
    return new ExpertProfileUpdated__Params(this);
  }
}

export class ExpertProfileUpdated__Params {
  _event: ExpertProfileUpdated;

  constructor(event: ExpertProfileUpdated) {
    this._event = event;
  }

  get expert(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get profession(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class MetadataUpdate extends ethereum.Event {
  get params(): MetadataUpdate__Params {
    return new MetadataUpdate__Params(this);
  }
}

export class MetadataUpdate__Params {
  _event: MetadataUpdate;

  constructor(event: MetadataUpdate) {
    this._event = event;
  }

  get _tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SlotAutoRevoked extends ethereum.Event {
  get params(): SlotAutoRevoked__Params {
    return new SlotAutoRevoked__Params(this);
  }
}

export class SlotAutoRevoked__Params {
  _event: SlotAutoRevoked;

  constructor(event: SlotAutoRevoked) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SlotBooked extends ethereum.Event {
  get params(): SlotBooked__Params {
    return new SlotBooked__Params(this);
  }
}

export class SlotBooked__Params {
  _event: SlotBooked;

  constructor(event: SlotBooked) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get expert(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get booker(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SlotCreated extends ethereum.Event {
  get params(): SlotCreated__Params {
    return new SlotCreated__Params(this);
  }
}

export class SlotCreated__Params {
  _event: SlotCreated;

  constructor(event: SlotCreated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get expert(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get startTime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get profession(): string {
    return this._event.parameters[5].value.toString();
  }
}

export class SlotResold extends ethereum.Event {
  get params(): SlotResold__Params {
    return new SlotResold__Params(this);
  }
}

export class SlotResold__Params {
  _event: SlotResold;

  constructor(event: SlotResold) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SlotRevoked extends ethereum.Event {
  get params(): SlotRevoked__Params {
    return new SlotRevoked__Params(this);
  }
}

export class SlotRevoked__Params {
  _event: SlotRevoked;

  constructor(event: SlotRevoked) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get expert(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get booker(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TimeSlotNFT__expertProfilesResult {
  value0: string;
  value1: string;
  value2: string;
  value3: string;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: boolean;

  constructor(
    value0: string,
    value1: string,
    value2: string,
    value3: string,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: boolean,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    return map;
  }

  getName(): string {
    return this.value0;
  }

  getProfession(): string {
    return this.value1;
  }

  getDescription(): string {
    return this.value2;
  }

  getEns(): string {
    return this.value3;
  }

  getTotalSlots(): BigInt {
    return this.value4;
  }

  getTotalBookings(): BigInt {
    return this.value5;
  }

  getRating(): BigInt {
    return this.value6;
  }

  getReviewCount(): BigInt {
    return this.value7;
  }

  getIsActive(): boolean {
    return this.value8;
  }
}

export class TimeSlotNFT__getExpertProfileResultValue0Struct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get profession(): string {
    return this[1].toString();
  }

  get description(): string {
    return this[2].toString();
  }

  get ens(): string {
    return this[3].toString();
  }

  get totalSlots(): BigInt {
    return this[4].toBigInt();
  }

  get totalBookings(): BigInt {
    return this[5].toBigInt();
  }

  get rating(): BigInt {
    return this[6].toBigInt();
  }

  get reviewCount(): BigInt {
    return this[7].toBigInt();
  }

  get isActive(): boolean {
    return this[8].toBoolean();
  }
}

export class TimeSlotNFT__getTimeSlotResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get expert(): Address {
    return this[1].toAddress();
  }

  get startTime(): BigInt {
    return this[2].toBigInt();
  }

  get endTime(): BigInt {
    return this[3].toBigInt();
  }

  get price(): BigInt {
    return this[4].toBigInt();
  }

  get isBooked(): boolean {
    return this[5].toBoolean();
  }

  get bookedBy(): Address {
    return this[6].toAddress();
  }

  get isRevoked(): boolean {
    return this[7].toBoolean();
  }

  get profession(): string {
    return this[8].toString();
  }

  get description(): string {
    return this[9].toString();
  }

  get createdAt(): BigInt {
    return this[10].toBigInt();
  }
}

export class TimeSlotNFT__timeSlotsResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;
  value6: Address;
  value7: boolean;
  value8: string;
  value9: string;
  value10: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: boolean,
    value6: Address,
    value7: boolean,
    value8: string,
    value9: string,
    value10: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set("value6", ethereum.Value.fromAddress(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    map.set("value8", ethereum.Value.fromString(this.value8));
    map.set("value9", ethereum.Value.fromString(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    return map;
  }

  getTokenId(): BigInt {
    return this.value0;
  }

  getExpert(): Address {
    return this.value1;
  }

  getStartTime(): BigInt {
    return this.value2;
  }

  getEndTime(): BigInt {
    return this.value3;
  }

  getPrice(): BigInt {
    return this.value4;
  }

  getIsBooked(): boolean {
    return this.value5;
  }

  getBookedBy(): Address {
    return this.value6;
  }

  getIsRevoked(): boolean {
    return this.value7;
  }

  getProfession(): string {
    return this.value8;
  }

  getDescription(): string {
    return this.value9;
  }

  getCreatedAt(): BigInt {
    return this.value10;
  }
}

export class TimeSlotNFT extends ethereum.SmartContract {
  static bind(address: Address): TimeSlotNFT {
    return new TimeSlotNFT("TimeSlotNFT", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canAutoRevoke(_tokenId: BigInt): boolean {
    let result = super.call("canAutoRevoke", "canAutoRevoke(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId),
    ]);

    return result[0].toBoolean();
  }

  try_canAutoRevoke(_tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canAutoRevoke",
      "canAutoRevoke(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  expertProfiles(param0: Address): TimeSlotNFT__expertProfilesResult {
    let result = super.call(
      "expertProfiles",
      "expertProfiles(address):(string,string,string,string,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new TimeSlotNFT__expertProfilesResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toString(),
      result[3].toString(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBoolean(),
    );
  }

  try_expertProfiles(
    param0: Address,
  ): ethereum.CallResult<TimeSlotNFT__expertProfilesResult> {
    let result = super.tryCall(
      "expertProfiles",
      "expertProfiles(address):(string,string,string,string,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TimeSlotNFT__expertProfilesResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toString(),
        value[3].toString(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBoolean(),
      ),
    );
  }

  expertSlots(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "expertSlots",
      "expertSlots(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_expertSlots(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "expertSlots",
      "expertSlots(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getExpertProfile(
    _expert: Address,
  ): TimeSlotNFT__getExpertProfileResultValue0Struct {
    let result = super.call(
      "getExpertProfile",
      "getExpertProfile(address):((string,string,string,string,uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromAddress(_expert)],
    );

    return changetype<TimeSlotNFT__getExpertProfileResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getExpertProfile(
    _expert: Address,
  ): ethereum.CallResult<TimeSlotNFT__getExpertProfileResultValue0Struct> {
    let result = super.tryCall(
      "getExpertProfile",
      "getExpertProfile(address):((string,string,string,string,uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromAddress(_expert)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<TimeSlotNFT__getExpertProfileResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getExpertSlots(_expert: Address): Array<BigInt> {
    let result = super.call(
      "getExpertSlots",
      "getExpertSlots(address):(uint256[])",
      [ethereum.Value.fromAddress(_expert)],
    );

    return result[0].toBigIntArray();
  }

  try_getExpertSlots(_expert: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getExpertSlots",
      "getExpertSlots(address):(uint256[])",
      [ethereum.Value.fromAddress(_expert)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getTimeSlot(_tokenId: BigInt): TimeSlotNFT__getTimeSlotResultValue0Struct {
    let result = super.call(
      "getTimeSlot",
      "getTimeSlot(uint256):((uint256,address,uint256,uint256,uint256,bool,address,bool,string,string,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)],
    );

    return changetype<TimeSlotNFT__getTimeSlotResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getTimeSlot(
    _tokenId: BigInt,
  ): ethereum.CallResult<TimeSlotNFT__getTimeSlotResultValue0Struct> {
    let result = super.tryCall(
      "getTimeSlot",
      "getTimeSlot(uint256):((uint256,address,uint256,uint256,uint256,bool,address,bool,string,string,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<TimeSlotNFT__getTimeSlotResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getUserBookings(_user: Address): Array<BigInt> {
    let result = super.call(
      "getUserBookings",
      "getUserBookings(address):(uint256[])",
      [ethereum.Value.fromAddress(_user)],
    );

    return result[0].toBigIntArray();
  }

  try_getUserBookings(_user: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUserBookings",
      "getUserBookings(address):(uint256[])",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  platformFeePercent(): BigInt {
    let result = super.call(
      "platformFeePercent",
      "platformFeePercent():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_platformFeePercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "platformFeePercent",
      "platformFeePercent():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  platformWallet(): Address {
    let result = super.call("platformWallet", "platformWallet():(address)", []);

    return result[0].toAddress();
  }

  try_platformWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "platformWallet",
      "platformWallet():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  royaltyPercent(): BigInt {
    let result = super.call("royaltyPercent", "royaltyPercent():(uint256)", []);

    return result[0].toBigInt();
  }

  try_royaltyPercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "royaltyPercent",
      "royaltyPercent():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  slotExists(param0: BigInt): boolean {
    let result = super.call("slotExists", "slotExists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBoolean();
  }

  try_slotExists(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("slotExists", "slotExists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  timeSlots(param0: BigInt): TimeSlotNFT__timeSlotsResult {
    let result = super.call(
      "timeSlots",
      "timeSlots(uint256):(uint256,address,uint256,uint256,uint256,bool,address,bool,string,string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new TimeSlotNFT__timeSlotsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean(),
      result[6].toAddress(),
      result[7].toBoolean(),
      result[8].toString(),
      result[9].toString(),
      result[10].toBigInt(),
    );
  }

  try_timeSlots(
    param0: BigInt,
  ): ethereum.CallResult<TimeSlotNFT__timeSlotsResult> {
    let result = super.tryCall(
      "timeSlots",
      "timeSlots(uint256):(uint256,address,uint256,uint256,uint256,bool,address,bool,string,string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TimeSlotNFT__timeSlotsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean(),
        value[6].toAddress(),
        value[7].toBoolean(),
        value[8].toString(),
        value[9].toString(),
        value[10].toBigInt(),
      ),
    );
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  userBookings(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "userBookings",
      "userBookings(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_userBookings(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userBookings",
      "userBookings(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _platformWallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class AutoRevokeCall extends ethereum.Call {
  get inputs(): AutoRevokeCall__Inputs {
    return new AutoRevokeCall__Inputs(this);
  }

  get outputs(): AutoRevokeCall__Outputs {
    return new AutoRevokeCall__Outputs(this);
  }
}

export class AutoRevokeCall__Inputs {
  _call: AutoRevokeCall;

  constructor(call: AutoRevokeCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AutoRevokeCall__Outputs {
  _call: AutoRevokeCall;

  constructor(call: AutoRevokeCall) {
    this._call = call;
  }
}

export class BatchAutoRevokeCall extends ethereum.Call {
  get inputs(): BatchAutoRevokeCall__Inputs {
    return new BatchAutoRevokeCall__Inputs(this);
  }

  get outputs(): BatchAutoRevokeCall__Outputs {
    return new BatchAutoRevokeCall__Outputs(this);
  }
}

export class BatchAutoRevokeCall__Inputs {
  _call: BatchAutoRevokeCall;

  constructor(call: BatchAutoRevokeCall) {
    this._call = call;
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class BatchAutoRevokeCall__Outputs {
  _call: BatchAutoRevokeCall;

  constructor(call: BatchAutoRevokeCall) {
    this._call = call;
  }
}

export class BatchCreateTimeSlotsCall extends ethereum.Call {
  get inputs(): BatchCreateTimeSlotsCall__Inputs {
    return new BatchCreateTimeSlotsCall__Inputs(this);
  }

  get outputs(): BatchCreateTimeSlotsCall__Outputs {
    return new BatchCreateTimeSlotsCall__Outputs(this);
  }
}

export class BatchCreateTimeSlotsCall__Inputs {
  _call: BatchCreateTimeSlotsCall;

  constructor(call: BatchCreateTimeSlotsCall) {
    this._call = call;
  }

  get _startTimes(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _endTimes(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _prices(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _professions(): Array<string> {
    return this._call.inputValues[3].value.toStringArray();
  }

  get _descriptions(): Array<string> {
    return this._call.inputValues[4].value.toStringArray();
  }
}

export class BatchCreateTimeSlotsCall__Outputs {
  _call: BatchCreateTimeSlotsCall;

  constructor(call: BatchCreateTimeSlotsCall) {
    this._call = call;
  }
}

export class BookSlotCall extends ethereum.Call {
  get inputs(): BookSlotCall__Inputs {
    return new BookSlotCall__Inputs(this);
  }

  get outputs(): BookSlotCall__Outputs {
    return new BookSlotCall__Outputs(this);
  }
}

export class BookSlotCall__Inputs {
  _call: BookSlotCall;

  constructor(call: BookSlotCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BookSlotCall__Outputs {
  _call: BookSlotCall;

  constructor(call: BookSlotCall) {
    this._call = call;
  }
}

export class BuyResoldSlotCall extends ethereum.Call {
  get inputs(): BuyResoldSlotCall__Inputs {
    return new BuyResoldSlotCall__Inputs(this);
  }

  get outputs(): BuyResoldSlotCall__Outputs {
    return new BuyResoldSlotCall__Outputs(this);
  }
}

export class BuyResoldSlotCall__Inputs {
  _call: BuyResoldSlotCall;

  constructor(call: BuyResoldSlotCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyResoldSlotCall__Outputs {
  _call: BuyResoldSlotCall;

  constructor(call: BuyResoldSlotCall) {
    this._call = call;
  }
}

export class CreateExpertProfileCall extends ethereum.Call {
  get inputs(): CreateExpertProfileCall__Inputs {
    return new CreateExpertProfileCall__Inputs(this);
  }

  get outputs(): CreateExpertProfileCall__Outputs {
    return new CreateExpertProfileCall__Outputs(this);
  }
}

export class CreateExpertProfileCall__Inputs {
  _call: CreateExpertProfileCall;

  constructor(call: CreateExpertProfileCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _profession(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _description(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _ens(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class CreateExpertProfileCall__Outputs {
  _call: CreateExpertProfileCall;

  constructor(call: CreateExpertProfileCall) {
    this._call = call;
  }
}

export class CreateTimeSlotCall extends ethereum.Call {
  get inputs(): CreateTimeSlotCall__Inputs {
    return new CreateTimeSlotCall__Inputs(this);
  }

  get outputs(): CreateTimeSlotCall__Outputs {
    return new CreateTimeSlotCall__Outputs(this);
  }
}

export class CreateTimeSlotCall__Inputs {
  _call: CreateTimeSlotCall;

  constructor(call: CreateTimeSlotCall) {
    this._call = call;
  }

  get _startTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _endTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _profession(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _description(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class CreateTimeSlotCall__Outputs {
  _call: CreateTimeSlotCall;

  constructor(call: CreateTimeSlotCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ResellSlotCall extends ethereum.Call {
  get inputs(): ResellSlotCall__Inputs {
    return new ResellSlotCall__Inputs(this);
  }

  get outputs(): ResellSlotCall__Outputs {
    return new ResellSlotCall__Outputs(this);
  }
}

export class ResellSlotCall__Inputs {
  _call: ResellSlotCall;

  constructor(call: ResellSlotCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _newPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ResellSlotCall__Outputs {
  _call: ResellSlotCall;

  constructor(call: ResellSlotCall) {
    this._call = call;
  }
}

export class RevokeSlotCall extends ethereum.Call {
  get inputs(): RevokeSlotCall__Inputs {
    return new RevokeSlotCall__Inputs(this);
  }

  get outputs(): RevokeSlotCall__Outputs {
    return new RevokeSlotCall__Outputs(this);
  }
}

export class RevokeSlotCall__Inputs {
  _call: RevokeSlotCall;

  constructor(call: RevokeSlotCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RevokeSlotCall__Outputs {
  _call: RevokeSlotCall;

  constructor(call: RevokeSlotCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdatePlatformFeeCall extends ethereum.Call {
  get inputs(): UpdatePlatformFeeCall__Inputs {
    return new UpdatePlatformFeeCall__Inputs(this);
  }

  get outputs(): UpdatePlatformFeeCall__Outputs {
    return new UpdatePlatformFeeCall__Outputs(this);
  }
}

export class UpdatePlatformFeeCall__Inputs {
  _call: UpdatePlatformFeeCall;

  constructor(call: UpdatePlatformFeeCall) {
    this._call = call;
  }

  get _newFeePercent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatePlatformFeeCall__Outputs {
  _call: UpdatePlatformFeeCall;

  constructor(call: UpdatePlatformFeeCall) {
    this._call = call;
  }
}

export class UpdateRoyaltyFeeCall extends ethereum.Call {
  get inputs(): UpdateRoyaltyFeeCall__Inputs {
    return new UpdateRoyaltyFeeCall__Inputs(this);
  }

  get outputs(): UpdateRoyaltyFeeCall__Outputs {
    return new UpdateRoyaltyFeeCall__Outputs(this);
  }
}

export class UpdateRoyaltyFeeCall__Inputs {
  _call: UpdateRoyaltyFeeCall;

  constructor(call: UpdateRoyaltyFeeCall) {
    this._call = call;
  }

  get _newFeePercent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateRoyaltyFeeCall__Outputs {
  _call: UpdateRoyaltyFeeCall;

  constructor(call: UpdateRoyaltyFeeCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
